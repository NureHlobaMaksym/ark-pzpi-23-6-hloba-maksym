МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ

ФАКУЛЬТЕТ КОМП’ЮТЕРНИХ НАУК
КАТЕДРА ПРОГРАМНОЇ ІНЖЕНЕРІЇ


ЗВІТ
до практичного завдання №1 
з дисципліни «Аналіз та рефакторинг коду» на тему: 
«Правила Оформлення Програмного Коду на TypeScript за конвецією Google TypeScript Style Guide»»


Виконав:							Перевірив:
ст. гр. ПЗПІ-23-6					ст. викладач катедри ПІ
Глоба Максим						Сокорчук Ігор Петрович









Харків 2025
1 ІСТОРІЯ ЗМІН
№ДатаВерсія звітуОпис змін та виправлень126.10.20251Створено звіт


2 ЗАВДАННЯ
     Метою практичного заняття є ознайомлення студентів з принципами написання чистого, зрозумілого та підтримуваного програмного коду. Студент повинен навчитися розпізнавати та застосовувати рекомендації щодо стилю оформлення коду, правильного іменування елементів програми, організації її структури, а також зрозуміти важливість рефакторингу та документування програмного забезпечення. У процесі виконання роботи студент обирає мову програмування та попередньо узгоджує свій вибір із викладачем, після чого досліджує основні правила написання якісного коду, що включають вибір зрозумілих імен змінних і функцій, дотримання єдиного стилю оформлення, логічне структурування модулів, коректну обробку помилок та оптимізацію коду.
     Окремим етапом є створення презентації або доповіді, у якій необхідно представити обрану мову програмування, пояснити правила оформлення та продемонструвати приклади їх практичного використання. Під час захисту студент має вміти аргументувати важливість дотримання цих рекомендацій для створення якісних програмних систем. Результатом роботи є структурований звіт у текстовому або PDF-форматі та матеріали для усного представлення.


3 ОПИС ВИКОНАНОЇ РОБОТИ
     3.1 Правила Оформлення Програмного Коду на TypeScript
     Визначено тему роботи — дослідження та систематизація правил оформлення коду на TypeScript. Вказано автора роботи (Глоба Максим Валерійович), що є початком презентації та окреслює її предмет.
     3.2 Вступ: Чому Стиль Коду Має Значення
     Обґрунтовано актуальність та важливість теми. Робота на цьому етапі полягала в аналізі переваг "чистого коду". Визначено, що єдиний стиль покращує читабельність, спрощує командну роботу, полегшує підтримку коду (maintenance) та пришвидшує процес онбордингу нових розробників.
     3.3 Структура Коду та Організація Проекту
     Етап роботи був присвячений правилам організації файлової структури. Описано принцип єдиної відповідальності (SRP) для модулів. Розглянуто два підходи до групування файлів: за функціональною ознакою (наприклад, components/, services/) та за доменною ознакою (наприклад, user/, product/). Також сформульовано правила послідовності імпортів для їх впорядкування.
     3.4 Форматування Коду: Відступи та Стиль Дужок
     Описано базові правила форматування. Встановлено стандарт на відступи (2 пробіли замість табуляції), як приклад:
     
1  function getData(): void {
2    // 2 пробіли
3    if (true) {
4      console.log("OK"); 
5    } 
6  }
     
     Встановлено рекомендовану довжину рядка (80 символів) для уникнення горизонтальної прокрутки. Також закріплено використання стилю дужок K&R, де відкриваюча дужка ставиться на тому ж рядку:
     
1  class User { 
2    constructor() { 
3      /* ... */ 
4    } 
5  }
     3.5 Конвенції Іменування: Чіткість та Послідовність
     Виконано роботу з систематизації конвенцій іменування для різних сутностей коду. Визначено:
- camelCase для змінних, параметрів та функцій.
- PascalCase для класів, інтерфейсів.
- SCREAMING_SNAKE_CASE для констант.
- PascalCase для членів Enums.
     3.6 Коментарі та Документування JSDoc
     Досліджено роль коментарів у коді. Сформульовано правило: коментарі мають пояснювати "Чому?" (складну логіку, бізнес-вимоги), а не "Що?" (для цього код має бути самодокументованим). Окремо описано стандарт JSDoc як інструмент для документування функцій, класів та інтерфейсів, що покращує роботу автодоповнення в IDE, як приклад:
     
1  /** @param w Ширина @param h Висота @returns Площа прямокутника */  
2  function area(w: number, h: number): number {  
3      return w * h;  
4  }
     3.7 Типи та Типізація: Створення Безпечного Коду
     Робота полягала в описі найкращих практик типізації. Це включає надання явних типів для функцій, як приклад:
     
1  const result: number = calculate(a, b);
     
     Також включає використання інтерфейсів для визначення контрактів об'єктів та суворе застереження проти використання any. Як безпечну альтернативу any запропоновано тип unknown.
     3.8 Обробка Помилок та Винятки
     Проаналізовано патерни обробки помилок. Описано коректне використання блоку try...catch для обробки синхронних винятків, з наголосом на типізації помилки як unknown або Error. Також розглянуто обробку помилок в асинхронному коді при роботі з async/await. А також наведено приклад безпечного коду:
     
try { 
    const data = JSON.parse(jsonString);
} catch (error: unknown) { 
    if (error instanceof Error) {
        console.error(error.message); 
    } else { 
        console.error('An unknown error occurred’); 
    }
}
     3.9 Інструменти: ESLint, Prettier, Husky
     Виконано огляд інструментів для автоматизації дотримання стилю.
- ESLint описаний як лінтер для статичного аналізу, що знаходить помилки та порушення стилю.
- Prettier — як автоматичний форматер, що приводить код до єдиного вигляду.
- Husky — як інструмент для налаштування Git-хуків (наприклад, pre-commit), що запускає перевірки перед комітом.
     3.10 Поширені Анти-патерни та "Запахи Коду"
     Ідентифіковано та описано поширені помилки в архітектурі та написанні коду. До них віднесено "магічні числа" (неіменовані константи), глибока вкладеність (висока цикломатична складність) та "божественні об'єкти" (класи, що порушують SRP).
     3.11 Висновки: Переваги Чистого Коду
     Підсумовано виконану роботу. Зроблено висновок, що дотримання правил оформлення коду — це інвестиція, яка приносить пришвидшення розробки (за рахунок легкості читання), зменшення кількості дефектів та покращення загальної ефективності команди. Ключова теза: "Чистий Код = Успішний Проєкт".
     3.12 Корисні Джерела та Подальше Вивчення
     Зібрано та представлено список джерел, на яких базувалося дослідження. Сюди увійшли: TypeScript Official Handbook, Google TypeScript Style Guide, посібник TypeScript Deep Dive, а також посилання на GitHub-репозиторії описаних інструментів (ESLint, Prettier).


4 ВИСНОВКИ
     У ході виконання практичного завдання було опрацьовано основні правила оформлення програмного коду на мові TypeScript відповідно до рекомендацій Google TypeScript Style Guide. Під час роботи було проаналізовано значення дотримання єдиного стилю написання коду, що прямо впливає на читабельність, підтримуваність та якість програмного продукту.
     Було отримано навички структурованої організації коду, застосування конвенцій іменування, форматування та впровадження модульності. Окрему увагу було приділено правильному використанню типів у TypeScript з метою підвищення надійності й безпеки коду. Було розглянуто важливість документування за допомогою JSDoc, що сприяє автоматичному генеруванню документації та покращує розуміння функціональності коду іншими розробниками.
     Також опрацьовано інструменти автоматизації контролю стилю (ESLint, Prettier, Husky), які дозволяють підтримувати єдині стандарти в командній розробці. Було визначено й типові помилки ("запахи коду") та способи їх уникнення шляхом рефакторингу.
     Таким чином, результати виконаної роботи доводять, що дотримання правил оформлення коду є необхідною складовою якісної розробки програмних систем. Використання чистого, зрозумілого та стандартизованого коду сприяє прискоренню розробки, зниженню кількості помилок та підвищенню ефективності співпраці в команді.


5 ВИКОРИСТАНІ ДЖЕРЕЛА
1. TypeScript Official Handbook. URL: https://www.typescriptlang.org/docs/handbook/intro.html (дата звернення: 26.10.2025).
2. TypeScript Deep Dive (GitBook by Basarat Ali Syed). URL: https://basarat.gitbook.io/typescript/ (дата звернення: 26.10.2025).
3. JSDoc Official Site. URL: https://jsdoc.app/ (дата звернення: 26.10.2025).
4. TypeScript ESLint. URL: https://typescript-eslint.io/ (дата звернення: 26.10.2025).
5. Prettier Official Docs. URL: https://prettier.io/docs/en/ (дата звернення: 26.10.2025).
6. Husky. URL: https://typicode.github.io/husky/ (дата звернення: 26.10.2025).
7. Clean Code TypeScript (GitHub Gist). URL: https://gist.github.com/solid-craft/a76b306b85f26cba2e60c410c5e7b5f5 (дата звернення: 26.10.2025).
8. Google TypeScript Style Guide. URL: https://google.github.io/styleguide/tsguide.html (дата звернення: 26.10.2025).


ДОДАТОК А
Відеозапис
     Відеозапис доповіді: https://www.youtube.com/watch?v=I3K_8kIk3i0
     
Хронологічний опис відеозапису:
     0:13 – Вступ: Чому Стиль Коду Має Значення
     1:01 – Структура Коду та Організація Проєкту
     1:46 – Форматування Коду: Відступи та Стиль Дужок
     2:28 – Конвенції Іменування: Чіткість та Послідовність
     3:11 – Коментарі та Документування JSDoc
     4:01 – Типи та Типізація: Створення Безпечного Коду
     5:04 – Обробка Помилок та Винятки
     6:02 – Інструменти для Автоматичної Перевірки Стилю
     7:17 – Поширені Анти-патерни та "Запахи" Коду
     8:23 – Висновки: Переваги Чистого Коду


ДОДАТОК Б
Слайди презентації

Рисунок Б.1 —Титульна сторінка презентації


Рисунок Б.2 — Вступ: Чому Стиль Коду Має Значення

Рисунок Б.3 — Структура Коду та Організація Проєкту


Рисунок Б.4 — Форматування Коду: Відступи та Стиль Дужок


Рисунок Б.5 — Конвенції Іменування: Чіткість та Послідовність


Рисунок Б.6 — Коментарі та Документування JSDoc


Рисунок Б.7 — Типи та Типізація: Створення Безпечного Коду


Рисунок Б.8 — Обробка Помилок та Винятки


Рисунок Б.9 — Інструменти для Автоматичної Перевірки Стилю


Рисунок Б.10 — Поширені Анти-патерни та "Запахи" Коду


Рисунок Б.11 — Висновки: Переваги Чистого Коду


Рисунок Б.12 — Корисні Джерела та Подальше Вивчення



2


